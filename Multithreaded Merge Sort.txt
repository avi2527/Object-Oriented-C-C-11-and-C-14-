
#define THREADS 4
#include <iostream>
#include <thread>
#include <fstream>
#include <vector>
using namespace std;

void merge_sort(vector<int> &V, int i, int j);              //sort elements of vector V from position i to position j
void merge(vector<int> &V, int i1, int i2, int j1, int j2); //Merge vector elements from position i1 to position i2 with vector elements
                                                            //from position j1 to position j2.
                                                            //Note that elements from i1 to i2 are already sorted, and elements from j1 to j2 are
                                                            //also sorted already.

int main()
{
    int n = 100000;
    vector<int> V(n); //V has n elements.
    for (int i = 0; i < 100000; i++)
        V[i] = rand() % 5000;
    //You need to crate four threads to perform sorting
    //You need to then save the sorted result to output.txt

    // Creating 4 threads a total of 5 threads including main
    thread TT[THREADS];
    TT[0] = thread(merge_sort, ref(V), 0, n / 4 - 1);
    TT[1] = thread(merge_sort, ref(V), n / 4, n / 2 - 1);
    TT[2] = thread(merge_sort, ref(V), n / 2, n - n / 4 - 1);
    TT[3] = thread(merge_sort, ref(V), n - n / 4, n - 1);
    for (int i = 0; i < THREADS; i++)
    {
        TT[i].join();
    }

    merge(V, 0, n / 4, n / 4 - 1, n / 2 - 1);
    merge(V, n / 2, n - n / 4, n - n / 4 - 1, n - 1);
    merge(V, 0, n / 2, n / 2 - 1, n - 1);

    ofstream out1("output.txt");
    for (int i = 0; i < n; i++)
    {
        if (i < n - 1)
        {
            out1 << V[i] << ",";
        }
        else
        {
            out1 << V[i] << endl;
        }
    }
    out1.close();
}

void merge_sort(vector<int> &V, int i, int j)
{
    if (i < j)
    {
        merge_sort(V, i, ((i + j) / 2));
        merge_sort(V, ((i + j) / 2) + 1, j);
        merge(V, i, ((i + j) / 2) + 1, ((i + j) / 2), j);
    }
    else
    {
        return;
    }
}

void merge(vector<int> &V, int i1, int i2, int j1, int j2)
{
    int i = 0;
    int j = 0;
    int n1 = j1 - i1 + 1;
    int n2 = j2 - i2 + 1;
    vector<int> A(n1);
    vector<int> B(n2);

    for (int i = 0; i < n1; i++)
    {
        A[i] = V[i + i1];
    }
    for (int j = 0; j < n2; j++)
    {
        B[j] = V[j + i2];
    }

    while ((i < n1) && (j < n2))
    {
        if (A[i] < B[j])
        {
            V[i1] = A[i];
            i++;
        }
        else
        {
            V[i1] = B[j];
            j++;
        }
        i1++;
    }

    while (i < n1)
    {
        V[i1] = A[i];
        i++;
        i1++;
    }
    while (j < n2)
    {
        V[i1] = B[j];
        j++;
        i1++;
    }
}
