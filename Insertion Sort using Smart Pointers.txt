
#include <iostream>
#include <memory>
using namespace std;

class node
{
  public:
	int value;
	//node * next;
	//node * previous;
	shared_ptr<node> next;
	weak_ptr<node> previous;
	//node(int i) { value = i; next = previous = nullptr; }
	node(int i) { value = i; }
	//node() { next = previous = nullptr; }
	node() {}
};

class doubly_linked_list
{
  public:
	//node * head;
	//node * tail;
	shared_ptr<node> head, tail;
	//doubly_linked_list() { head = tail = nullptr; }
	doubly_linked_list() {}
	void make_random_list(int m, int n);
	void print_forward();
	void print_backward();

	//***************************
	//You need to implement insertion_sort following the
	//special requirements.
	void insertion_sort();
};

void doubly_linked_list::insertion_sort()
{
	if ((head->next == nullptr) || (head == nullptr))
		return;
	else
	{
		shared_ptr<node> current = head->next;
		while (current)
		{
			shared_ptr<node> node1 = current;
			shared_ptr<node> node2 = head;
			if (current->value < (current->previous.lock()->value))
			{
				if (current == tail)
					tail = current->previous.lock();
			}
			while (node2 != nullptr)
			{
				if (current->value < node2->value)
				{
					current->previous.lock()->next = current->next;
					if (head == node2)
					{
						head = current;
					}
					if (current->next != nullptr)
					{
						current->next->previous = current->previous.lock();
					}
					current->previous = node2->previous.lock();
					if (node2->previous.lock() != nullptr)
					{
						node2->previous.lock()->next = current;
					}
					node2->previous = current;
					current->next = node2;
					break;
				}
				node2 = node2->next;
			}
			current = node1->next;
		}
	}
}

void doubly_linked_list::make_random_list(int m, int n)
{

	for (int i = 0; i < m; i++)
	{
		//node * p1 = new node(rand() % n);
		shared_ptr<node> p1 = make_shared<node>(rand() % n);
		p1->previous = tail;
		//if (tail != nullptr ) tail->next = p1;
		if (tail)
			tail->next = p1;
		tail = p1;
		//if (head == nullptr) head = p1;
		if (!head)
			head = p1;
	}
}

void doubly_linked_list::print_forward()
{
	cout << endl;
	//node * p1 = head;
	shared_ptr<node> p1 = head;
	//while (p1 != nullptr) {
	while (p1)
	{
		cout << p1->value << " ";
		p1 = p1->next;
	}
}

void doubly_linked_list::print_backward()
{
	cout << endl;
	//node * p1 = tail;
	shared_ptr<node> p1 = tail;
	//while (p1 != nullptr) {
	while (p1)
	{
		cout << p1->value << " ";
		p1 = p1->previous.lock();
	}
}

int main()
{
	doubly_linked_list d1;
	d1.make_random_list(30, 10);
	d1.print_forward();
	d1.print_backward();
	d1.insertion_sort();
	d1.print_forward();
	d1.print_backward();
	getchar();
	getchar();
	return 0;
}
